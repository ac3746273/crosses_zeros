// Global variables
let currentPlayer = 'X';
let gameBoard = ['', '', '', '', '', '', '', '', ''];

// Function to display winner or tie message
function checkWinner() {
    // Possible winning combinations
    const winCombinations = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
    ];

    // Check combinations for winning
    for (let combination of winCombinations) {
        const [a, b, c] = combination;
        if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {
            return gameBoard[a];
        }
    }

    // Check for tie
    if (!gameBoard.includes('')) {
        return 'tie';
    }

    return null;
}

// Function to update game state after move
function updateGameState(cellIndex) {
    gameBoard[cellIndex] = currentPlayer;
    const winner = checkWinner();

    if (winner) {
        if (winner === 'tie') {
            alert('The game ended in a tie!');
        } else {
            alert(`Player ${winner} wins!`);
        }
        resetGame();
    } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    }
}

// Function to reset the game
function resetGame() {
    currentPlayer = 'X';
    gameBoard = ['', '', '', '', '', '', '', '', ''];
    document.querySelectorAll('.cell').forEach(cell => cell.innerText = '');
}

// Add click events to cells
document.querySelectorAll('.cell').forEach(cell => {
    cell.addEventListener('click', () => {
        const cellIndex = cell.getAttribute('data-index');
        if (gameBoard[cellIndex] === '' && !checkWinner()) {
            cell.innerText = currentPlayer;
            updateGameState(cellIndex);
        }
    });
});

// Reset button
document.getElementById('reset-button').addEventListener('click', resetGame);
